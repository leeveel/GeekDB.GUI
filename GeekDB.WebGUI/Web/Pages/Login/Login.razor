@page "/"

@layout CenterLayout
@inject NavigationManager NavigationManager
@inject LoginService loginService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider provider


<MudText Typo="Typo.h4" GutterBottom="true">Config Center</MudText>

<MudTextField @bind-Value="@UserName" Label="username" Variant="Variant.Outlined" Class="my-6"></MudTextField>

<MudTextField @bind-Value="@Password" Label="password" Variant="Variant.Outlined" InputType="@PasswordInput" Adornment="Adornment.End" AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="TogglePasswordVisibility" />

@* <div Class="d-flex justify-space-between align-center">
    <MudCheckBox T="bool" Label="Remember me?" Color="Color.Primary" Class="ml-n1 my-3"></MudCheckBox>
</div>  *@

@if (IsSignIn)
{
    <div class="d-flex align-center flex-column">
        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
    </div>
}
else
{
    <MudButton Class="mt-5 mb-0" Variant="Variant.Filled" Color="Color.Primary" Size="Size.Large" FullWidth="true" @onclick="@(async () => await DoLogin())">Sign In</MudButton>
}

@code {
    string UserName { get; set; } = "admin";
    string Password { get; set; } = "123456";
    bool PasswordVisibility;
    bool IsSignIn = false;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void TogglePasswordVisibility()
    {
        @if (PasswordVisibility)
        {
            PasswordVisibility = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            PasswordVisibility = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    async Task DoLogin()
    {
        IsSignIn = true;
        var err = await loginService.Verify(UserName, Password);
        var myProvider = (CustomAuthenticationStateProvider)provider;
        if (err != null)
        {
            await myProvider.UpdateState();
            Snackbar.Configuration.PositionClass = Defaults.Classes.Position.BottomRight;
            Snackbar.Add(err, Severity.Error);
        }
        else
        {
            await myProvider.UpdateState(new LoginUserInfo { Name = UserName });
            Snackbar.Clear();
            NavigationManager.NavigateTo("setpath");
        }
        IsSignIn = false;
    }
}
